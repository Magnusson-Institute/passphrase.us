
    Base32mi (v04)

    base64 has many issues with ambiguity in (human) transcription. in
    response there have been a few attempts at defining a subset (aka
    "base32"); none of these have quite taken off.

    base32mi is our attempt at this. we continue to iterate it, so
    it's important to keep track of versions. this file describes
    base32mi.v04

    v04 vs v03: we've made some adjustment after field testing, more
    stringently reducing ambiguities (for example completely omitting
    "0" and "1"), and adding 8 symbols into the mix: so many sites
    start requiring "at least one symbol", that we feel we need to
    adjust.  Unfortunately, sites are also starting to get "clever"
    (it's not) and not allow any repetitions. In the case of an
    8-character password, the two constraints combined lead to a
    reduction of entropy from 40.0 to approximately 39.

    ================
  
    base32 encodes in chunks of 5 bits rather than 6. We strive
    to remove as much ambiguity as possible, as well as a few other
    goals.

    Latest (v04) set is (eight sets of eight or 32 characters):

       23456789
       bcdemnvw
       AFHKLPQY
       #$?!/+%@  note that "=" is available

    Part of the design intent is to encode some "error correction";
    thus the following substitutions (from "synonym" to "symbol")
    can be performed by a site that accepts base32mi.v04

     Value    Symbol    Synonyms         v04 change
       0        0       O o Q D          Avoid entirely
       1        1       l I i J          Avoid entirely
       2        2       Z z
       3        3        
       4        4       A                Allow both 4 and A
       5        5       S s
       6        6       G
       7        7       t
       8        8       B
       9        9       g q
       10       a                        Avoid
       11       b        
       12       c       C
       13       d        
       14       e        
       15       f                        F only
       16       y       Y                Y only
       17       h       n                n only
       18       E                        e only
       19       j                        Avoid
       20       K       k x X
       21       L        
       22       m       M
       23       N                        n only
       24       H        
       25       P       p
       26       F        
       27       r                        Avoid
       28       R                        Avoid
       29       T                        Avoid
       30       U       u v V            v only
       31       W       w                w only
                        
    base32mi.v04 has 8 symbols, numerals, upper case, and lower case.

    Symbols are included, previous work up through v03 is included,
    but we avoid a few symbols that are occasional problems (notably
    with various IBM or Oracle systems), namely: -.=@, but in the
    end we do go with @ as a better choice than &.

    This maximum spread of the 32 characters will maximize (*) the
    probability that a random string will contain at least one of
    each, in the situations (such as this implementation) where we
    want to maximize acceptability by typical web password systems:

       0123456789
       abcdefhjmry
       EFHKLNPRTUW

       12345678901
    
    Current NIST (as of 2022) recommendations are 8 characters if
    chosen by a user, and 6 if assigned by a system: we therefore
    recommend 8 base32mi characters generated by computer.


    (*) Restricting to "at least one of each type" leads to:

    32**8 - (24**8 * 4) + (8**8 * 4) = 659,277,479,936 

    This is 39.26 bits of entropy vs 40.0 bits of entropy if there are
    no constraints. It's better that the computer enforce this, rather
    than leave up to a human to pick a change (such as picking which
    letter to be capitalized).

    The restriction of not allowing duplicates reduces the baseline
    from 32**8 to 32*(31**8) or a loss of 0.32 bits of entropy. This
    loss is *approximatly* in addition to the above, so both
    constraints together translate into a net result of about 39 bits
    of entropy for a baseline of an 8-character password.
